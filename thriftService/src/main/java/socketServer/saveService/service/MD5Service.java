/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package socketServer.saveService.service;

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-22")
public class MD5Service {

  public interface Iface {

    public String dispatcherCheck(String arg0, String arg1) throws TException;

  }

  public interface AsyncIface {

    public void dispatcherCheck(String arg0, String arg1, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String dispatcherCheck(String arg0, String arg1) throws TException
    {
      send_dispatcherCheck(arg0, arg1);
      return recv_dispatcherCheck();
    }

    public void send_dispatcherCheck(String arg0, String arg1) throws TException
    {
      dispatcherCheck_args args = new dispatcherCheck_args();
      args.setArg0(arg0);
      args.setArg1(arg1);
      sendBase("dispatcherCheck", args);
    }

    public String recv_dispatcherCheck() throws TException
    {
      dispatcherCheck_result result = new dispatcherCheck_result();
      receiveBase(result, "dispatcherCheck");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dispatcherCheck failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void dispatcherCheck(String arg0, String arg1, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      dispatcherCheck_call method_call = new dispatcherCheck_call(arg0, arg1, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dispatcherCheck_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String arg0;
      private String arg1;
      public dispatcherCheck_call(String arg0, String arg1, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.arg0 = arg0;
        this.arg1 = arg1;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dispatcherCheck", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dispatcherCheck_args args = new dispatcherCheck_args();
        args.setArg0(arg0);
        args.setArg1(arg1);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dispatcherCheck();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("dispatcherCheck", new dispatcherCheck());
      return processMap;
    }

    public static class dispatcherCheck<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dispatcherCheck_args> {
      public dispatcherCheck() {
        super("dispatcherCheck");
      }

      public dispatcherCheck_args getEmptyArgsInstance() {
        return new dispatcherCheck_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dispatcherCheck_result getResult(I iface, dispatcherCheck_args args) throws TException {
        dispatcherCheck_result result = new dispatcherCheck_result();
        result.success = iface.dispatcherCheck(args.arg0, args.arg1);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("dispatcherCheck", new dispatcherCheck());
      return processMap;
    }

    public static class dispatcherCheck<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dispatcherCheck_args, String> {
      public dispatcherCheck() {
        super("dispatcherCheck");
      }

      public dispatcherCheck_args getEmptyArgsInstance() {
        return new dispatcherCheck_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            dispatcherCheck_result result = new dispatcherCheck_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dispatcherCheck_result result = new dispatcherCheck_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dispatcherCheck_args args, AsyncMethodCallback<String> resultHandler) throws TException {
        iface.dispatcherCheck(args.arg0, args.arg1,resultHandler);
      }
    }

  }

  public static class dispatcherCheck_args implements org.apache.thrift.TBase<dispatcherCheck_args, dispatcherCheck_args._Fields>, java.io.Serializable, Cloneable, Comparable<dispatcherCheck_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dispatcherCheck_args");

    private static final org.apache.thrift.protocol.TField ARG0_FIELD_DESC = new org.apache.thrift.protocol.TField("arg0", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ARG1_FIELD_DESC = new org.apache.thrift.protocol.TField("arg1", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dispatcherCheck_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dispatcherCheck_argsTupleSchemeFactory());
    }

    public String arg0; // required
    public String arg1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARG0((short)1, "arg0"),
      ARG1((short)2, "arg1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARG0
            return ARG0;
          case 2: // ARG1
            return ARG1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARG0, new org.apache.thrift.meta_data.FieldMetaData("arg0", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARG1, new org.apache.thrift.meta_data.FieldMetaData("arg1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dispatcherCheck_args.class, metaDataMap);
    }

    public dispatcherCheck_args() {
    }

    public dispatcherCheck_args(
      String arg0,
      String arg1)
    {
      this();
      this.arg0 = arg0;
      this.arg1 = arg1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dispatcherCheck_args(dispatcherCheck_args other) {
      if (other.isSetArg0()) {
        this.arg0 = other.arg0;
      }
      if (other.isSetArg1()) {
        this.arg1 = other.arg1;
      }
    }

    public dispatcherCheck_args deepCopy() {
      return new dispatcherCheck_args(this);
    }

    @Override
    public void clear() {
      this.arg0 = null;
      this.arg1 = null;
    }

    public String getArg0() {
      return this.arg0;
    }

    public dispatcherCheck_args setArg0(String arg0) {
      this.arg0 = arg0;
      return this;
    }

    public void unsetArg0() {
      this.arg0 = null;
    }

    /** Returns true if field arg0 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg0() {
      return this.arg0 != null;
    }

    public void setArg0IsSet(boolean value) {
      if (!value) {
        this.arg0 = null;
      }
    }

    public String getArg1() {
      return this.arg1;
    }

    public dispatcherCheck_args setArg1(String arg1) {
      this.arg1 = arg1;
      return this;
    }

    public void unsetArg1() {
      this.arg1 = null;
    }

    /** Returns true if field arg1 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg1() {
      return this.arg1 != null;
    }

    public void setArg1IsSet(boolean value) {
      if (!value) {
        this.arg1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARG0:
        if (value == null) {
          unsetArg0();
        } else {
          setArg0((String)value);
        }
        break;

      case ARG1:
        if (value == null) {
          unsetArg1();
        } else {
          setArg1((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARG0:
        return getArg0();

      case ARG1:
        return getArg1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARG0:
        return isSetArg0();
      case ARG1:
        return isSetArg1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dispatcherCheck_args)
        return this.equals((dispatcherCheck_args)that);
      return false;
    }

    public boolean equals(dispatcherCheck_args that) {
      if (that == null)
        return false;

      boolean this_present_arg0 = true && this.isSetArg0();
      boolean that_present_arg0 = true && that.isSetArg0();
      if (this_present_arg0 || that_present_arg0) {
        if (!(this_present_arg0 && that_present_arg0))
          return false;
        if (!this.arg0.equals(that.arg0))
          return false;
      }

      boolean this_present_arg1 = true && this.isSetArg1();
      boolean that_present_arg1 = true && that.isSetArg1();
      if (this_present_arg1 || that_present_arg1) {
        if (!(this_present_arg1 && that_present_arg1))
          return false;
        if (!this.arg1.equals(that.arg1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_arg0 = true && (isSetArg0());
      list.add(present_arg0);
      if (present_arg0)
        list.add(arg0);

      boolean present_arg1 = true && (isSetArg1());
      list.add(present_arg1);
      if (present_arg1)
        list.add(arg1);

      return list.hashCode();
    }

    @Override
    public int compareTo(dispatcherCheck_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetArg0()).compareTo(other.isSetArg0());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg0()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg0, other.arg0);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg1()).compareTo(other.isSetArg1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg1, other.arg1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dispatcherCheck_args(");
      boolean first = true;

      sb.append("arg0:");
      if (this.arg0 == null) {
        sb.append("null");
      } else {
        sb.append(this.arg0);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg1:");
      if (this.arg1 == null) {
        sb.append("null");
      } else {
        sb.append(this.arg1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dispatcherCheck_argsStandardSchemeFactory implements SchemeFactory {
      public dispatcherCheck_argsStandardScheme getScheme() {
        return new dispatcherCheck_argsStandardScheme();
      }
    }

    private static class dispatcherCheck_argsStandardScheme extends StandardScheme<dispatcherCheck_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dispatcherCheck_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG0
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.arg0 = iprot.readString();
                struct.setArg0IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARG1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.arg1 = iprot.readString();
                struct.setArg1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dispatcherCheck_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.arg0 != null) {
          oprot.writeFieldBegin(ARG0_FIELD_DESC);
          oprot.writeString(struct.arg0);
          oprot.writeFieldEnd();
        }
        if (struct.arg1 != null) {
          oprot.writeFieldBegin(ARG1_FIELD_DESC);
          oprot.writeString(struct.arg1);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dispatcherCheck_argsTupleSchemeFactory implements SchemeFactory {
      public dispatcherCheck_argsTupleScheme getScheme() {
        return new dispatcherCheck_argsTupleScheme();
      }
    }

    private static class dispatcherCheck_argsTupleScheme extends TupleScheme<dispatcherCheck_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dispatcherCheck_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArg0()) {
          optionals.set(0);
        }
        if (struct.isSetArg1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetArg0()) {
          oprot.writeString(struct.arg0);
        }
        if (struct.isSetArg1()) {
          oprot.writeString(struct.arg1);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dispatcherCheck_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.arg0 = iprot.readString();
          struct.setArg0IsSet(true);
        }
        if (incoming.get(1)) {
          struct.arg1 = iprot.readString();
          struct.setArg1IsSet(true);
        }
      }
    }

  }

  public static class dispatcherCheck_result implements org.apache.thrift.TBase<dispatcherCheck_result, dispatcherCheck_result._Fields>, java.io.Serializable, Cloneable, Comparable<dispatcherCheck_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dispatcherCheck_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dispatcherCheck_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dispatcherCheck_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dispatcherCheck_result.class, metaDataMap);
    }

    public dispatcherCheck_result() {
    }

    public dispatcherCheck_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dispatcherCheck_result(dispatcherCheck_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public dispatcherCheck_result deepCopy() {
      return new dispatcherCheck_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public dispatcherCheck_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dispatcherCheck_result)
        return this.equals((dispatcherCheck_result)that);
      return false;
    }

    public boolean equals(dispatcherCheck_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(dispatcherCheck_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dispatcherCheck_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dispatcherCheck_resultStandardSchemeFactory implements SchemeFactory {
      public dispatcherCheck_resultStandardScheme getScheme() {
        return new dispatcherCheck_resultStandardScheme();
      }
    }

    private static class dispatcherCheck_resultStandardScheme extends StandardScheme<dispatcherCheck_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dispatcherCheck_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dispatcherCheck_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dispatcherCheck_resultTupleSchemeFactory implements SchemeFactory {
      public dispatcherCheck_resultTupleScheme getScheme() {
        return new dispatcherCheck_resultTupleScheme();
      }
    }

    private static class dispatcherCheck_resultTupleScheme extends TupleScheme<dispatcherCheck_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dispatcherCheck_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dispatcherCheck_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
